
/**
 * Creates a (potentially massive) set of placeholder styles.
 *
 * @param args A SASS map containing the following keys (those with defaults are optional):
 *
 *   property                            - The CSS property name, e.g. 'grid-column-start'.
 *   property-alias - default: $property - I.e 'u-[property-alias]-value'.
 *   value-start    - default: 0         - Property's value to start at.
 *   value-end      - default: 10        - Property's value to end at.
 *   step           - default: 1         - Amount to increment the value between placeholders.
 *   prefix         - default: ''        - String to shove before the value, e.g. ???
 *   postfix        - default: ''        - String to shove after the value, e.g. 'px'.
 *
 * Extra temporary notes (TODO: Remove)
 *   Might need to use 'unquote($value)' because of strings.
 *
 */

@mixin auto-gen-placeholders($args) {

  //@debug $args;

  $property: map-get($args, 'property');
  $property-alias: map-use($args, 'property-alias', $property);
  $step: map-use($args, 'step', 1);
  $value-start: (map-use($args, 'value-start', 0)) / $step;
  $value-end: map-use($args, 'value-end', 10) / $step;
  $prefix: map-use($args, 'prefix', '');
  $postfix: map-use($args, 'postfix', '');

  @for $i from $value-start through $value-end {

    $placeholder-name: $global-utilities-namespace + $property-alias + $i;
    $value: $prefix + $i * $step + $postfix;

    // For no breakpoint
    %#{$placeholder-name} {
      #{$property}: $value;
    }

    // For every breakpoint
    @each $breakpoint-key, $breakpoint-value in $global-breakpoints {
      %#{$placeholder-name + '--' + $breakpoint-key} {
        @include breakpoint($breakpoint-key) {
          #{$property}: $value;
        }
      }
    }

  }

}


/*

// Function to be passed into auto-gen-placeholders($args) for grid-column (gc) and/or other crazy stuff

$name: 'gc- + $start + '-' + $span;
$properties: (
  'grid-column': unquote($start + ' / span ' + $span),
  'width': 100%
);

function($name, $properties) {

  $columns: 12;

  @for $start from 1 through $columns {
    @for $span from 1 through $columns {

      // Only add object if the specified values don't "overflow" out of the grid
      @if $start + $span < $columns + 2 {

        // DO THE MIDDLE BIT OF auto-gen-placeholders
        make-placeholders($name, $properties);

    }
  }

}

/*


/*

// Function to be passed into auto-gen-placeholders($args) for width: auto, 1-20rem, and 0-100%

$name: 'width + $value'


function() {

  @for $i from 1 through 20 {
    make-placeholders: ($name, $unit)
  }

  @for $i from 0 through 100 {
    make-placeholders: (
      name: 'width'
      value: $i + '%'
    )
  }

}



/* Stolen from uprise theme work

$object: 'gc-';
$columns: 12;


@for $start from 1 through $columns {
  @for $span from 1 through $columns {

    // Only add object if the specified values don't "overflow" out of the grid
    @if $start + $span < $columns + 2 {

      $object: 'gc-' + $start + '-' + $span;

      // For no breakpoint
      %#{$global-objects-namespace + $object} {
        width: 100%;
        grid-column: unquote($start + ' / span ' + $span);
      }

      // For every breakpoint
      @each $breakpoint-key, $breakpoint-value in $global-breakpoints {
        %#{$global-objects-namespace + $object + '--' + $breakpoint-key} {
          @include breakpoint($breakpoint-key) {
            width: 100%;
            grid-column: unquote($start + ' / span ' + $span);
          }
        }
      }

    }

  }
}


// Special case to add 'o-gc-full' (which is just an alias for `o-gc-1-12`).
// `grid-column: 1 / -1` isn't used because it'd be an extra css rule.
$object: 'gc-full';

// For no breakpoint
%#{$global-objects-namespace + $object} {
  width: 100%;
  grid-column: unquote('1 / span ' + $columns);
}

// For every breakpoint
@each $breakpoint-key, $breakpoint-value in $global-breakpoints {
  %#{$global-objects-namespace + $object + '--' + $breakpoint-key} {
    @include breakpoint($breakpoint-key) {
      width: 100%;
      grid-column: unquote('1 / span ' + $columns);
    }
  }
}
*/