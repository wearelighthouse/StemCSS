/**
  * TODO
  * Multi-property
  * Stepped are extending - but it checks classnames not values?
  * placeholdersDefined is a list of 'propertyvalue'. BUT.
 */

$placeholdersDefined: '' !global;

@mixin makeUtilities($propertiesSettings) {

    // each property...
    @each $propertySetting in $propertiesSettings {

        // property:
        $propertyDefinition: ifnoterror($propertySetting, property, 'No "Property: "declared in settings!');
        
        // string
        $property: $propertyDefinition;
        $propertyClass: $propertyDefinition;

        // list
        @if (type_of($property) == list) {
            $property: first($propertyDefinition);
            $propertyClass: last($propertyDefinition)
        }

        // add hyphen
        // wait - this won't work for .u-block or .u-absolute;
        $propertyClass: $propertyClass + '-';
        
        // List values
        $valuesSettings: ifnoterror($propertySetting, values, 'No "Values: ()" declared in settings!');

        @each $valueSetting in $valuesSettings {

            // Simple Values
            @if (type_of($valueSetting) == list) {
                
                @each $valueDefinition in $valueSetting {

                    $value: $valueDefinition;
                    $valueClass: $valueDefinition;
                    
                    // Value has Class nickname
                    @if type_of($valueDefinition) == list {
                        $value: first($valueDefinition);
                        $valueClass: last($valueDefinition);
                    }

                    $utility: $global-utilities-namespace + $propertyClass + $valueClass;
                    $selector: #{'.' + $utility};

                    @include createPlaceholderAndUtility($utility, $property, $value, $selector);
                    
                    @include addToPlaceholderDefinitions(#{$property + $value});
                }
            }

            // NOT Simple Values
            @if (type_of($valueSetting) == map) {

                // Complex Value
                @if map-has-key($valueSetting, value) {

                    $valueDefinition: map-get($valueSetting, value);
                    $value: $valueDefinition;
                    $valueClass: $valueDefinition;

                    // Value Class = Shortname
                    @if type_of($valueDefinition) == list {
                        $value: first($valueDefinition);
                        $valueClass: last($valueDefinition);
                    }

                    // Define the utility
                    $utility: $global-utilities-namespace + $propertyClass + $valueClass;

                    $combinator: '';
                    @if (map-has-key($valueSetting, combinator)) {
                        $combinator: map-get($valueSetting, combinator);
                    }
                    
                    // Define the selector
                    $selector: #{'.' + $utility + $combinator};
                    
                    // Create Placeholder, Make Utility Classes
                    @include createPlaceholderAndUtility($utility, $property, $value, $selector);
                    
                    @include addToPlaceholderDefinitions(#{$property + $value});
                    
                    // Psuedos
                    @if (map-has-key($valueSetting, pseudos)) {

                        @each $pseudo in map-get($valueSetting, pseudos) {
                            
                            // Simple Pseudo
                            @if (type_of($pseudo) == string) {

                                $combinator: '';
                                @if (map-has-key($valueSetting, combinator)) {
                                    $combinator: map-get($valueSetting, combinator);
                                }

                                $selector: #{'.' + $utility + $global-pseudo-separator + $pseudo + ':' + $pseudo + $combinator};
                
                                @include createUtilityFromPlaceholder($selector, $utility);
                            }

                            // Combination pseudo (hoverfocus)
                            @if (type_of($pseudo) == list) {

                                $pseudoClass: str-replace(to-string($pseudo), '" ', '');

                                @each $pseudoPart in $pseudo {

                                    $combinator: '';
                                    @if (map-has-key($valueSetting, combinator)) {
                                        $combinator: map-get($valueSetting, combinator);
                                    }

                                    $selector: #{'.' + $utility + $global-pseudo-separator + $pseudoClass + ':' + $pseudoPart + $combinator};
                                    @include createUtilityFromPlaceholder($selector, $utility);
                                }
                            }
                        }
                    }

                    // Breakpoints
                    @if (map-has-key($valueSetting, breakpoints)) {

                        @each $breakpoint in map-get($valueSetting, breakpoints) {

                            $combinator: '';
                            @if (map-has-key($valueSetting, combinator)) {
                                $combinator: map-get($valueSetting, combinator);
                            }
                    
                            $selector: #{'.' + $utility + $global-breakpoint-separator + $breakpoint + combinator};
                 
                            @include breakpoint($breakpoint) {
                                @include makeClass($selector, $property, $value);
                            }
                        }
                    }
                }

                // Placeholders
                @if (map-has-key($valueSetting, placeholders)) {

                    @each $placeholder in map-get($valueSetting, placeholders) {

                        $value: $placeholder;
                        $valueClass: $placeholder;
                        
                        // Value has Class nickname
                        @if type_of($placeholder) == list {
                            $value: first($placeholder);
                            $valueClass: last($placeholder);
                        }
            
                        $utility: $global-utilities-namespace + $propertyClass + $valueClass;
                        
                        $selector: #{'.' + $utility};
                        
                        @include createPlaceholder($utility) {
                            #{$property}: #{$value};
                        }

                        @include addToPlaceholderDefinitions(#{$property + $value});
                    }
                }

                // Stepped
                @if (map-has-key($valueSetting, start)) {

                    $start: map-get($valueSetting, start);
                    $end: map-get($valueSetting, end);
                    $step: 1;

                    @if (map-has-key($valueSetting, step)) {
                        $step: map-get($valueSetting, step);
                    }

                    $unit: '';
                    $unitClass: '';

                    @if (map-has-key($valueSetting, unit)) {
                        $unitDefinition: map-get($valueSetting, unit);
                        
                        $unit: $unitDefinition;
                        $unitClass: $unitDefinition;

                        @if (type_of($unitDefinition) == list) {
                            $unit: first($unitDefinition);
                            $unitClass: last($unitDefinition);
                        }
                    }

                    $combinator: '';
                    @if (map-has-key($valueSetting, combinator)) {
                        $combinator: map-get($valueSetting, combinator);
                    }

                    $value: $start;
                    $valueClass: ''; // do I need this?

                    @while $value <= $end {

                        $valueClass: #{str-replace(to-string($value), '.', '') + $unitClass};

                        // Define the utility
                        $utility: $global-utilities-namespace + $propertyClass + $valueClass;
                        
                        // Define the selector
                        $selector: #{'.' + $utility + $combinator};

                        $valuePlusUnit: #{$value + $unit};
                        
                        @if (index($placeholdersDefined, #{$property + $value}) != null) {

                        } @else {
                            
                            // new placeholder
                            @include createPlaceholderAndUtility($utility, $property, $valuePlusUnit, $selector);

                            @include addToPlaceholderDefinitions(#{$property + $value});

                        }

                        $value: $value + $step;
                    }
                }
            }
        }
    }

    @debug $placeholdersDefined;
}
