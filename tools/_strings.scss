@function strReplace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + strReplace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}


@function toString($list, $glue: '', $is-nested: false) {
  $result: null;

  @for $i from 1 through length($list) {
    $e: nth($list, $i);

    @if type-of($e) == list {
      $result: $result#{toString($e, $glue, true)};
    }

    @else {
      $result: if($i != length($list) or $is-nested, $result#{$e}#{$glue}, $result#{$e});
    }
  }

  @return $result;
}


@function stripUnit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}


@function toPx($number) {
  @return $number + 0px;
}


@function toRem($number) {
  @return $number + 0rem;
}


/**
 * Split a string into a list of strings, using a specified separator character.
 */
@function split($string, $separator) {
  $i: str-index($string, $separator);
  @if $i != null {
    @return append(
      str-slice($string, 1, $i - 1),
      str-split(str-slice($string, $i + 1), $separator)
    );
  }
  @return $string;
}


/**
 * Convert a string into an integer.
 *
 * String must be digits-only.
 * Only works with positive numbers.
 */
@function parseInt($string) {
  $int: 0;
  @for $i from 1 through str-length($string) {
    $char: str-slice($string, $i, $i);
    @for $digit from 0 through 9 {
      @if '' + $digit == $char {
        $int: $int + $digit * pow(10, str-length($string) - $i);
      }
    }
  }
  @return $int;
}
