{"version":3,"sources":["tools/_breakpoints.scss","tools/_utilities.scss","settings/_container.scss","styles.css","settings/_combinator-utilities.scss","settings/_number-utilities.scss","settings/_number-utilities-flex.scss","settings/_unit-utilities.scss","settings/_unit-utilities-position.scss","settings/_word-utilities.scss","settings/_word-utilities-flex.scss","settings/_word-utilities-colours.scss","base/_reset.scss","tools/_placeholders.scss","tools/_make-class.scss","components/_button.scss"],"names":[],"mappings":"AAcA,qCAAqC;ACdrC;;;;;;GAMG;ACNH;EACE,uBAAuB;CAKxB;;AFAG;EENJ;IAII,6BAAsB;GAEzB;CCUA;;AChBD;;GAEG;ACFH;;;;GAIG;ACJH;;GAEG;ACFH;;GAEG;ACFH;;GAEG;ACFH;;GAEG;ACFH;;GAEG;ACFH;;GAEG;ACFH;;;;;;;;;;;;EAYE,yBAAyB;EACzB,UAAU;EACV,WAAW;EACX,wBAAwB;EACxB,UAAU;EACV,WAAW;EACX,gBAAgB;CACjB;;AAED;;EAEE,iBAAiB;CAClB;;AAED;EACE,mBAAmB;EACnB,mBAAmB;CACpB;;AAED;EACE,eAAe;CAChB;;AAED;;;;;;;;;;;;EAYE,eAAe;CAChB;;AAED;;;;;;EAME,oBAAoB;CACrB;;AAED;EACE,iBAAiB;CAClB;;AAED;;EAEE,aAAY;CACb;;AAED;;;;EAIE,YAAY;EACZ,cAAc;CACf;;AAED;EACE,yBAAyB;EACzB,UAAU;EACV,WAAW;EACX,wBAAwB;EACxB,gBAAgB;EAChB,eAAe;EACf,sBAAsB;EACtB,yCAAiC;CAOlC;;AAfD;EAaI,yCAAiC;CAClC;;AAGH;EACE,uBAAuB;EACvB,YAAY;EACZ,sBAAsB;CACvB;;AAED;EACE,uBAAuB;EACvB,mBAAmB;EACnB,kBAAkB;EAClB,YAAY;CACb;;AAED;EACE,8BAA8B;CAC/B;;AAED;;EAEE,0BAA0B;EAC1B,aAAa;CACd;;AAED;EACE,0BAA0B;EAC1B,kBAAkB;CACnB;;AAED;EACE,eAAe;CAChB;;AAED;EACE,UAAU;EACV,WAAW;EACX,iBAAiB;EACjB,aAAa;EACb,oBAAoB;CACrB;;AAED;;;EAGE,gBAAgB;CACjB;;AAED;;EAEE,uBAAuB;CACxB;;AAED;;;;EAIE,cAAc;EACd,eAAe;CAChB;;AAED;;EAEE,WAAW;EACX,UAAU;CACX;;AAED;EACE,cAAc;CACf;;AAED;;;;EAIE,uBAAuB;EACvB,+DAA8D;EAC9D,4DAA2D;CAC5D;;ACpKG;EAkBI,gBAAc;CAhBjB;;AAFD;EAkBI,mBAAc;CAhBjB;;AAFD;EAkBI,YAAc;CAhBjB;;AAFD;EAkBI,eAAc;CAhBjB;;AAFD;EAkBI,eAAc;CAhBjB;;AAFD;EAkBI,gBAAc;CAhBjB;;AAFD;EAkBI,mBAAc;CAhBjB;;AbDD;EcLF;IAEI,mBAAoB;GAEvB;CXgPF;;AH/OG;EcLF;IAEI,mBAAoB;GAEvB;CXsPF;;AUtPG;EAkBI,cAAc;CAhBjB;;AAFD;EAkBI,cAAc;CAhBjB;;AAFD;EAkBI,cAAc;CAhBjB;;AAFD;EAkBI,cAAc;CAhBjB;;AAFD;EAkBI,cAAc;CAhBjB;;AAFD;EAkBI,cAAc;CAhBjB;;AAFD;EAkBI,cAAc;CAhBjB;;AAFD;EAkBI,cAAc;CAhBjB;;AAFD;EAkBI,cAAc;CAhBjB;;AAFD;EAkBI,WAAc;CAhBjB;;AAFD;EAkBI,aAAc;CAhBjB;;AAFD;EAkBI,aAAc;CAhBjB;;AAFD;EAkBI,aAAc;CAhBjB;;AAFD;EAkBI,aAAc;CAhBjB;;AAFD;EAkBI,WAAc;CAhBjB;;AAFD;EAkBI,WAAc;CAhBjB;;AAFD;EAkBI,WAAc;CAhBjB;;AAFD;EAkBI,WAAc;CAhBjB;;AAFD;EAkBI,WAAc;CAhBjB;;AAFD;EAkBI,YAAc;CAhBjB;;AAFD;EAkBI,WAAc;CAhBjB;;AAFD;EAkBI,WAAc;CAhBjB;;AEPL;;GAEG","file":"styles.css","sourcesContent":["@mixin breakpoint($size, $breakpoints: $global-breakpoints) {\n  $breakpoint-found: map-has-key($breakpoints, $size);\n\n  @if ($breakpoint-found == true) {\n    $breakpoint: map-get($breakpoints, $size);\n\n    @media #{$breakpoint} {\n      @content;\n    }\n  } @else {\n    @warn \"Breakpoint size \" + #{$size} + \" doesn't exist.\"\n  }\n}\n\n/* Source: IotaCSS iota-breakpoint */\n","/**\n  * TODO\n  * Multi-property\n  * Combinators\n  * Stepped are extending - but it checks classnames not values?\n  * placeholdersDefined is a list of 'propertyvalue'. BUT.\n */\n\n$placeholdersDefined: '' !global;\n\n@mixin makeUtilities($propertiesSettings) {\n\n    // each property...\n    @each $propertySetting in $propertiesSettings {\n\n        // property:\n        $propertyDefinition: ifnoterror($propertySetting, property, 'No \"Property: \"declared in settings!');\n        \n        // string\n        $property: $propertyDefinition;\n        $propertyClass: $propertyDefinition;\n\n        // list\n        @if (type_of($property) == list) {\n            $property: first($propertyDefinition);\n            $propertyClass: last($propertyDefinition)\n        }\n\n        // add hyphen\n        // wait - this won't work for .u-block or .u-absolute;\n        $propertyClass: $propertyClass + '-';\n        \n        // List values\n        $valuesSettings: ifnoterror($propertySetting, values, 'No \"Values: ()\" declared in settings!');\n\n        @each $valueSetting in $valuesSettings {\n\n            // Simple Values\n            @if (type_of($valueSetting) == list) {\n                \n                @each $valueDefinition in $valueSetting {\n\n                    $value: $valueDefinition;\n                    $valueClass: $valueDefinition;\n                    \n                    // Value has Class nickname\n                    @if type_of($valueDefinition) == list {\n                        $value: first($valueDefinition);\n                        $valueClass: last($valueDefinition);\n                    }\n\n                    $utility: $global-utilities-namespace + $propertyClass + $valueClass;\n                    $selector: #{'.' + $utility};\n\n                    @include createPlaceholderAndUtility($utility, $property, $value, $selector);\n                    \n                    @include addToPlaceholderDefinitions(#{$property + $value});\n                }\n            }\n\n            // NOT Simple Values\n            @if (type_of($valueSetting) == map) {\n\n                // Complex Value\n                @if map-has-key($valueSetting, value) {\n\n                    $valueDefinition: map-get($valueSetting, value);\n                    $value: $valueDefinition;\n                    $valueClass: $valueDefinition;\n\n                    // Value Class = Shortname\n                    @if type_of($valueDefinition) == list {\n                        $value: first($valueDefinition);\n                        $valueClass: last($valueDefinition);\n                    }\n\n                    // Define the utility\n                    $utility: $global-utilities-namespace + $propertyClass + $valueClass;\n\n                    $combinator: '';\n                    @if (map-has-key($valueSetting, combinator)) {\n                        $combinator: map-get($valueSetting, combinator);\n                    }\n                    \n                    // Define the selector\n                    $selector: #{'.' + $utility + $combinator};\n                    \n                    // Create Placeholder, Make Utility Classes\n                    @include createPlaceholderAndUtility($utility, $property, $value, $selector);\n                    \n                    @include addToPlaceholderDefinitions(#{$property + $value});\n                    \n                    // Psuedos\n                    @if (map-has-key($valueSetting, pseudos)) {\n\n                        @each $pseudo in map-get($valueSetting, pseudos) {\n                            \n                            // Simple Pseudo\n                            @if (type_of($pseudo) == string) {\n\n                                $combinator: '';\n                                @if (map-has-key($valueSetting, combinator)) {\n                                    $combinator: map-get($valueSetting, combinator);\n                                }\n\n                                $selector: #{'.' + $utility + $global-pseudo-separator + $pseudo + ':' + $pseudo + $combinator};\n                \n                                @include createUtilityFromPlaceholder($selector, $utility);\n                            }\n\n                            // Combination pseudo (hoverfocus)\n                            @if (type_of($pseudo) == list) {\n\n                                $pseudoClass: str-replace(to-string($pseudo), '\" ', '');\n\n                                @each $pseudoPart in $pseudo {\n\n                                    $combinator: '';\n                                    @if (map-has-key($valueSetting, combinator)) {\n                                        $combinator: map-get($valueSetting, combinator);\n                                    }\n\n                                    $selector: #{'.' + $utility + $global-pseudo-separator + $pseudoClass + ':' + $pseudoPart + $combinator};\n                                    @include createUtilityFromPlaceholder($selector, $utility);\n                                }\n                            }\n                        }\n                    }\n\n                    // Breakpoints\n                    @if (map-has-key($valueSetting, breakpoints)) {\n\n                        @each $breakpoint in map-get($valueSetting, breakpoints) {\n\n                            $combinator: '';\n                            @if (map-has-key($valueSetting, combinator)) {\n                                $combinator: map-get($valueSetting, combinator);\n                            }\n                    \n                            $selector: #{'.' + $utility + $global-breakpoint-separator + $breakpoint + combinator};\n                 \n                            @include breakpoint($breakpoint) {\n                                @include makeClass($selector, $property, $value);\n                            }\n                        }\n                    }\n                }\n\n                // Placeholders\n                @if (map-has-key($valueSetting, placeholders)) {\n\n                    @each $placeholder in map-get($valueSetting, placeholders) {\n\n                        $value: $placeholder;\n                        $valueClass: $placeholder;\n                        \n                        // Value has Class nickname\n                        @if type_of($placeholder) == list {\n                            $value: first($placeholder);\n                            $valueClass: last($placeholder);\n                        }\n            \n                        $utility: $global-utilities-namespace + $propertyClass + $valueClass;\n                        \n                        $selector: #{'.' + $utility};\n                        \n                        @include createPlaceholder($utility) {\n                            #{$property}: #{$value};\n                        }\n\n                        @include addToPlaceholderDefinitions(#{$property + $value});\n                    }\n                }\n\n                // Stepped\n                @if (map-has-key($valueSetting, start)) {\n\n                    $start: map-get($valueSetting, start);\n                    $end: map-get($valueSetting, end);\n                    $step: 1;\n\n                    @if (map-has-key($valueSetting, step)) {\n                        $step: map-get($valueSetting, step);\n                    }\n\n                    $unit: '';\n                    $unitClass: '';\n\n                    @if (map-has-key($valueSetting, unit)) {\n                        $unitDefinition: map-get($valueSetting, unit);\n                        \n                        $unit: $unitDefinition;\n                        $unitClass: $unitDefinition;\n\n                        @if (type_of($unitDefinition) == list) {\n                            $unit: first($unitDefinition);\n                            $unitClass: last($unitDefinition);\n                        }\n                    }\n\n                    $combinator: '';\n                    @if (map-has-key($valueSetting, combinator)) {\n                        $combinator: map-get($valueSetting, combinator);\n                    }\n\n                    $value: $start;\n                    $valueClass: ''; // do I need this?\n\n                    @while $value <= $end {\n\n                        $valueClass: #{str-replace(to-string($value), '.', '') + $unitClass};\n\n                        // Define the utility\n                        $utility: $global-utilities-namespace + $propertyClass + $valueClass;\n                        \n                        // Define the selector\n                        $selector: #{'.' + $utility + $combinator};\n\n                        $valuePlusUnit: #{$value + $unit};\n                        \n                        @if (index($placeholdersDefined, #{$property + $value}) != null) {\n\n                        } @else {\n                            \n                            // new placeholder\n                            @include createPlaceholderAndUtility($utility, $property, $valuePlusUnit, $selector);\n\n                            @include addToPlaceholderDefinitions(#{$property + $value});\n\n                        }\n\n                        $value: $value + $step;\n                    }\n                }\n            }\n        }\n    }\n\n    @debug $placeholdersDefined;\n}\n",":root {\n  --ContainerWidth: 98vw;\n\n  @include breakpoint(fromlarge) {\n    --ContainerWidth: calc(90vw);\n  }\n}","/* Source: IotaCSS iota-breakpoint */\n/**\n  * TODO\n  * Multi-property\n  * Combinators\n  * Stepped are extending - but it checks classnames not values?\n  * placeholdersDefined is a list of 'propertyvalue'. BUT.\n */\n:root {\n  --ContainerWidth: 98vw;\n}\n\n@media screen and (min-width: 1400px) {\n  :root {\n    --ContainerWidth: calc(90vw);\n  }\n}\n\n/**\n * Combinator Utilities\n */\n/**\n * Number Utilities\n * - optional: Ranges of Numbers\n * - optional: Steps within ranges.\n */\n/**\n * Number Utilities - Flex\n */\n/**\n * Unit Utilities\n */\n/**\n * Unit Utilities - Position\n */\n/**\n * Word Utilities\n */\n/**\n * Word Utilities - Flex\n */\n/**\n * Word Utilities - Colours\n */\nhtml, body, div, span, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\nabbr, address, cite, code,\ndel, dfn, em, img, ins, kbd, q, samp,\nsmall, strong, sub, sup, var,\nb, i,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, main, aside, canvas, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section, summary,\ntime, mark, audio, video {\n  vertical-align: baseline;\n  margin: 0;\n  padding: 0;\n  background: transparent;\n  border: 0;\n  outline: 0;\n  font-size: 100%;\n}\n\nhtml,\nbody {\n  min-height: 100%;\n}\n\nhtml {\n  overflow-x: hidden;\n  overflow-y: scroll;\n}\n\n:root {\n  line-height: 1;\n}\n\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nmain,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n  display: block;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-weight: normal;\n}\n\nli {\n  list-style: none;\n}\n\nblockquote,\nq {\n  quotes: none;\n}\n\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n  content: '';\n  content: none;\n}\n\na {\n  vertical-align: baseline;\n  margin: 0;\n  padding: 0;\n  background: transparent;\n  font-size: 100%;\n  color: inherit;\n  text-decoration: none;\n  -webkit-tap-highlight-color: transparent;\n}\n\na:hover, a:focus, a:active {\n  -webkit-tap-highlight-color: transparent;\n}\n\nins {\n  background-color: #ff9;\n  color: #000;\n  text-decoration: none;\n}\n\nmark {\n  background-color: #ff9;\n  font-style: italic;\n  font-weight: bold;\n  color: #000;\n}\n\ndel {\n  text-decoration: line-through;\n}\n\nabbr[title],\ndfn[title] {\n  border-bottom: 1px dotted;\n  cursor: help;\n}\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\nhr {\n  display: block;\n}\n\nbutton {\n  margin: 0;\n  padding: 0;\n  background: none;\n  border: none;\n  text-align: inherit;\n}\n\nlabel,\nbutton,\nselect {\n  cursor: pointer;\n}\n\ninput,\nselect {\n  vertical-align: middle;\n}\n\ninput,\nselect,\ntextarea,\nbutton {\n  font: inherit;\n  color: inherit;\n}\n\ninput::-moz-focus-inner,\nbutton::-moz-focus-inner {\n  padding: 0;\n  border: 0;\n}\n\ncode {\n  font: inherit;\n}\n\n*,\n*:before,\n*:after,\n* * {\n  box-sizing: border-box;\n  -webkit-tap-highlight-color: rgba(255, 255, 255, 0) !important;\n  -webkit-focus-ring-color: rgba(255, 255, 255, 0) !important;\n}\n\n.u-pos-fixed {\n  position: fixed;\n}\n\n.u-pos-rel {\n  position: relative;\n}\n\n.u-pos-0 {\n  position: 0;\n}\n\n.u-pos-1rem {\n  position: 1rem;\n}\n\n.u-pos-2rem {\n  position: 2rem;\n}\n\n.u-pos-15rem {\n  position: 15rem;\n}\n\n.u-pos-abs > * + *, .u-pos-abs\\@visited:visited > * + *, .u-pos-abs\\@hoverfocus:hover > * + *, .u-pos-abs\\@hoverfocus:focus > * + * {\n  position: absolute;\n}\n\n@media screen and (max-width: 1399px) {\n  .u-pos-abs\\@uptolargecombinator {\n    position: absolute;\n  }\n}\n\n@media screen and (min-width: 1400px) {\n  .u-pos-abs\\@fromlargecombinator {\n    position: absolute;\n  }\n}\n\n.u-pos-10pc {\n  position: 10%;\n}\n\n.u-pos-20pc {\n  position: 20%;\n}\n\n.u-pos-30pc {\n  position: 30%;\n}\n\n.u-pos-40pc {\n  position: 40%;\n}\n\n.u-pos-50pc {\n  position: 50%;\n}\n\n.u-pos-60pc {\n  position: 60%;\n}\n\n.u-pos-70pc {\n  position: 70%;\n}\n\n.u-pos-80pc {\n  position: 80%;\n}\n\n.u-pos-90pc {\n  position: 90%;\n}\n\n.u-opac-0 {\n  opacity: 0;\n}\n\n.u-opac-02 {\n  opacity: 0.2;\n}\n\n.u-opac-04 {\n  opacity: 0.4;\n}\n\n.u-opac-06 {\n  opacity: 0.6;\n}\n\n.u-opac-08 {\n  opacity: 0.8;\n}\n\n.u-opac-1 {\n  opacity: 1;\n}\n\n.u-z-1 {\n  z-index: 1;\n}\n\n.u-z-2 {\n  z-index: 2;\n}\n\n.u-z-top {\n  z-index: 3;\n}\n\n.u-z-4 {\n  z-index: 4;\n}\n\n.u-z--1 {\n  z-index: -1;\n}\n\n.u-z-0 {\n  z-index: 0;\n}\n\n.u-z-5 {\n  z-index: 5;\n}\n\n/**\n * .c-button\n */\n","/**\n * Combinator Utilities\n */\n\n$combinatorUtilitiesSettings: (\n  ( combinator: '> * + *',\n    properties: (\n      ( property: 'margin-top',\n        propertyClass: 'sibling-mt-',\n\n        units: (\n          (\n            unit: 'rem',\n            unitClass: $global-rem-class,\n\n            values: (\n              (\n                value: 2,\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n  ),\n);\n","/**\n * Number Utilities\n * - optional: Ranges of Numbers\n * - optional: Steps within ranges.\n */\n\n$numberUtilitiesSettings: (\n  ( property: 'z-index',\n    propertyClass: 'z-',\n\n    ranges: (\n      (\n        start: -1,\n        end: 1,\n      ),\n    ),\n  ),\n);\n","/**\n * Number Utilities - Flex\n */\n\n$numberUtilitiesFlexSettings: (\n  (\n    property: 'flex-grow',\n    propertyClass: 'grow-',\n\n    values: (\n      (\n        value: 0,\n      ),\n      (\n        value: 1,\n      ),\n    ),\n  ),\n  (\n    property: 'flex-shrink',\n    propertyClass: 'shrink-',\n\n    values: (\n      (\n        value: 0,\n      ),\n      (\n        value: 1,\n      ),\n    ),\n  ),\n  (\n    property: 'flex-basis',\n    propertyClass: 'basis-',\n\n    values: (\n      (\n        value: 0,\n      ),\n    ),\n  ),\n);\n","/**\n * Unit Utilities\n */\n\n$unitUtilitiesSettings: (\n  ( property: 'width',\n    propertyClass: 'width-',\n\n    units: (\n      (\n        unit: '%',\n        unitClass: $global-percentage-class,\n\n        values: (\n          (\n            value: 100,\n          ),\n        ),\n      ),\n      (\n        unit: 'px',\n        unitClass: $global-px-class,\n\n        values: (\n          (\n            value: 1,\n          ),\n        ),\n      ),\n    ),\n  ),\n  ( property: 'height',\n    propertyClass: 'height-',\n\n    units: (\n      (\n        unit: '%',\n        unitClass: $global-percentage-class,\n\n        values: (\n          (\n            value: 100,\n          ),\n        ),\n      ),\n      (\n        unit: 'px',\n        unitClass: $global-px-class,\n\n        values: (\n          (\n            value: 1,\n          ),\n        ),\n      ),\n    ),\n  ),\n  ( property: ('margin-right', 'margin-left'),\n    propertyClass: 'mh-',\n\n    keywords: (\n      (\n        keyword: 'auto',\n      ),\n    ),\n  ),\n);\n","/**\n * Unit Utilities - Position\n */\n\n$unitUtilitiesPositionSettings: (\n  ( property: 'top',\n    propertyClass: 'top-',\n\n    units: (\n      (\n        unit: '%',\n        unitClass: $global-percentage-class,\n\n        values: (\n          (\n            value: 50,\n          ),\n        ),\n      ),\n    ),\n\n    keywords: (\n      (\n        keyword: 0,\n      ),\n    ),\n  ),\n  ( property: 'right',\n    propertyClass: 'right-',\n\n    units: (\n      (\n        unit: '%',\n        unitClass: $global-percentage-class,\n\n        values: (\n          (\n            value: 100,\n          ),\n        ),\n      ),\n    ),\n\n    keywords: (\n      (\n        keyword: 0,\n        keywordClass: '0',\n      ),\n    ),\n  ),\n  ( property: 'bottom',\n    propertyClass: 'bottom-',\n\n    keywords: (\n      (\n        keyword: 0,\n      ),\n    ),\n  ),\n  ( property: 'left',\n    propertyClass: 'left-',\n\n    units: (\n      (\n        unit: '%',\n        unitClass: $global-percentage-class,\n\n        values: (\n          (\n            value: 50,\n          ),\n          (\n            value: 100,\n          ),\n        ),\n      ),\n    ),\n\n    keywords: (\n      (\n        keyword: 0,\n      ),\n    ),\n  ),\n);\n","/**\n * Word Utilities\n */\n\n$wordUtilitiesSettings: (\n  (\n    property: 'overflow',\n    propertyClass: 'ov-',\n\n    values: (\n      (\n        value: 'hidden',\n      ),\n    ),\n  ),\n  (\n    property: 'visibility',\n    propertyClass: 'vis-',\n\n    values: (\n      (\n        value: 'hidden',\n      ),\n    ),\n  ),\n  (\n    property: 'position',\n    propertyClass: 'pos-',\n\n    values: (\n      (\n        value: 'absolute',\n      ),\n      (\n        value: 'relative',\n      ),\n    ),\n  ),\n  (\n    property: 'display',\n    propertyClass: '',\n\n    values: (\n      (\n        value: 'flex',\n      ),\n      (\n        value: 'grid',\n      ),\n      (\n        value: 'block',\n      ),\n      (\n        value: 'none',\n      ),\n    ),\n  ),\n  (\n    property: 'pointer-events',\n    propertyClass: 'pointer-',\n\n    values: (\n      (\n        value: 'none',\n      ),\n    ),\n  ),\n);\n","/**\n * Word Utilities - Flex\n */\n\n$wordUtilitiesFlexSettings: (\n  (\n    property: 'flex-direction',\n    propertyClass: 'fd-',\n\n    values: (\n      (\n        value: 'column',\n        valueClass: 'col',\n      ),\n    ),\n  ),\n  (\n    property: 'flex-wrap',\n    propertyClass: 'fw-',\n\n    values: (\n      (\n        value: 'wrap',\n      ),\n      (\n        value: 'nowrap',\n        valueClass: 'no',\n      ),\n    ),\n  ),\n  (\n    property: 'align-items',\n    propertyClass: 'ai-',\n\n    values: (\n      (\n        value: 'flex-start',\n        valueClass: 'start',\n      ),\n      (\n        value: 'center',\n      ),\n      (\n        value: 'flex-end',\n        valueClass: 'end',\n      ),\n    ),\n  ),\n  (\n    property: 'justify-content',\n    propertyClass: 'jc-',\n\n    values: (\n      (\n        value: 'center',\n      ),\n      (\n        value: 'space-between',\n        valueClass: 'between',\n      ),\n      (\n        value: 'space-around',\n        valueClass: 'around',\n      ),\n    ),\n  ),\n);\n","/**\n * Word Utilities - Colours\n */\n\n$wordUtilitiesColoursSettings: (\n  (\n    property: 'color',\n    propertyClass: 'color-',\n\n    values: (\n      (\n        value: $colour-white,\n        valueClass: 'white',\n      ),\n    ),\n  ),\n  (\n    property: 'background-color',\n    propertyClass: 'bgcolor-',\n\n    values: (\n      (\n        value: $colour-brand,\n        valueClass: 'brand',\n      ),\n    ),\n  ),\n  (\n    property: 'fill',\n    propertyClass: 'fill-',\n\n    values: (\n      (\n        value: $colour-white,\n        valueClass: 'white',\n      ),\n    ),\n  ),\n);\n","html, body, div, span, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\nabbr, address, cite, code,\ndel, dfn, em, img, ins, kbd, q, samp,\nsmall, strong, sub, sup, var,\nb, i,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, main, aside, canvas, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section, summary,\ntime, mark, audio, video {\n  vertical-align: baseline;\n  margin: 0;\n  padding: 0;\n  background: transparent;\n  border: 0;\n  outline: 0;\n  font-size: 100%;\n}\n\nhtml,\nbody {\n  min-height: 100%;\n}\n\nhtml {\n  overflow-x: hidden;\n  overflow-y: scroll;\n}\n\n:root {\n  line-height: 1;\n}\n\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nmain,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n  display: block;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-weight: normal;\n}\n\nli {\n  list-style: none;\n}\n\nblockquote,\nq {\n  quotes:none;\n}\n\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n  content: '';\n  content: none;\n}\n\na {\n  vertical-align: baseline;\n  margin: 0;\n  padding: 0;\n  background: transparent;\n  font-size: 100%;\n  color: inherit;\n  text-decoration: none;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n\n  &:hover,\n  &:focus,\n  &:active {\n    -webkit-tap-highlight-color: rgba(0,0,0,0);\n  }\n}\n\nins {\n  background-color: #ff9;\n  color: #000;\n  text-decoration: none;\n}\n\nmark {\n  background-color: #ff9;\n  font-style: italic;\n  font-weight: bold;\n  color: #000;\n}\n\ndel {\n  text-decoration: line-through;\n}\n\nabbr[title],\ndfn[title] {\n  border-bottom: 1px dotted;\n  cursor: help;\n}\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\nhr {\n  display: block;\n}\n\nbutton {\n  margin: 0;\n  padding: 0;\n  background: none;\n  border: none;\n  text-align: inherit;\n}\n\nlabel,\nbutton,\nselect {\n  cursor: pointer;\n}\n\ninput,\nselect {\n  vertical-align: middle;\n}\n\ninput,\nselect,\ntextarea,\nbutton {\n  font: inherit;\n  color: inherit;\n}\n\ninput::-moz-focus-inner,\nbutton::-moz-focus-inner {\n  padding: 0;\n  border: 0;\n}\n\ncode {\n  font: inherit;\n}\n\n*,\n*:before,\n*:after,\n* * {\n  box-sizing: border-box;\n  -webkit-tap-highlight-color: rgba(255, 255, 255, 0) !important;\n  -webkit-focus-ring-color: rgba(255, 255, 255, 0) !important;\n}\n","@mixin addToPlaceholderDefinitions($utility) {\n    $placeholdersDefined: append($placeholdersDefined, $utility) !global;\n}\n\n@mixin createPlaceholder($placeholder) {\n    %#{$placeholder} {\n        @content;\n    }\n}\n\n@mixin extend($placeholder) {\n    @extend %#{$placeholder};\n}\n\n@mixin createUtilityFromPlaceholder($selector, $utilityPair) {\n    #{$selector} {\n        @include extend($utilityPair);\n    }\n}\n\n@mixin createPlaceholderAndUtility($utilityPair, $property, $value, $selector) {\n                    \n    @include createPlaceholder($utilityPair) {\n        #{$property}: #{$value};\n    }\n\n    @include createUtilityFromPlaceholder($selector, $utilityPair);\n}","@mixin makeClass($selector, $properties, $value) {\n  #{$selector} {\n    @each $propertySingle in $properties {\n      #{$propertySingle}: #{$value};\n    }\n  }\n}\n","/**\n * .c-button\n */\n\n$component: 'button';\n\n#{'.' + $global-components-namespace + $component} {\n}\n"]}